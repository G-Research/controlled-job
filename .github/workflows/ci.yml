name: CI

on:
  push:
  pull_request:
  schedule:
    # Run daily at 01:34 so we get notified if CI is broken before a pull request
    # is submitted.
    - cron: "34 1 * * *"

permissions:
  contents: read

jobs:
  formatting:
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    name: Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        id: setup-go
        uses: ./.github/actions/setup-go
        with:
          cache-prefix: formatting

      - name: Compute tools cache info
        id: tools-cache-info
        run: |
          echo path=$(go env GOPATH)/bin >> $GITHUB_OUTPUT
          echo make-hash=$(make -n install-tools | sha256sum | cut -d' ' -f1) >> $GITHUB_OUTPUT

      - name: Setup tools cache
        uses: actions/cache@v4
        id: tools-cache
        with:
          path: ${{ steps.tools-cache-info.outputs.path }}
          key: tools-go-${{ steps.setup-go.outputs.go-version }}-make-${{ steps.tools-cache-info.outputs.make-hash }}

      - name: Install tools
        if: steps.tools-cache.outputs.cache-hit != 'true'
        env:
          GOCACHE: /tmp/tools/go-build
          GOMODCACHE: /tmp/tools/go-mod
        run: make install-tools

      - name: Check formatting
        run: |
          make go-format
          modified=$(git ls-files --modified -- '*.go')
          if [ -n "$modified" ]; then
            for file in $modified; do
              echo "::error file=$file::$file is not formatted properly (hint: run \"make go-format\" to fix this)"
            done
            exit 1
          fi

      - name: Check module files
        run: |
          go mod tidy
          modified=$(git ls-files --modified -- go.{mod,sum})
          if [ -n "$modified" ]; then
            for file in $modified; do
              echo "::error file=$file::$file is not up to date (hint: run \"go mod tidy\" to fix this)"
            done
            exit 1
          fi

      - name: Check generated code
        run: |
          make generate
          modified=$(git ls-files --modified -- '*.go')
          if [ -n "$modified" ]; then
            for file in $modified; do
              echo "::error file=$file::$file is not up to date (hint: run \"make generate\" to fix this)"
            done
            exit 1
          fi

      - name: Check manifests
        run: |
          make manifests
          modified=$(git ls-files --modified)
          if [ -n "$modified" ]; then
            for file in $modified; do
              echo "::error file=$file::$file is not up to date (hint: run \"make manifests\" to fix this)"
            done
            exit 1
          fi

  tests:
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: ./.github/actions/setup-go
        with:
          cache-prefix: tests

      - name: Run Go Tests
        run: make test

  build:
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    name: Build (${{ matrix.os }}/${{ matrix.arch }})
    strategy:
      matrix:
        os: [linux]
        arch: [amd64, arm64]
        include:
          - os: linux
            runner: ubuntu-latest
      fail-fast: true
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: ./.github/actions/setup-go
        with:
          cache-prefix: build-${{ matrix.os }}-${{ matrix.arch }}

      - name: Build Go binary
        run: make build

  # Virtual job that can be configured as a required check before a PR can be merged.
  # As GitHub considers a check as successful if it is skipped, we need to check its status in
  # another workflow (check-required.yml) and create a check there.
  all-required-checks-done:
    name: All required checks done
    needs:
      - formatting
      - tests
      - build
    runs-on: ubuntu-latest
    steps:
      - run: echo "All required checks done"