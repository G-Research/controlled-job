# Helper to print a header-style line, to make it easier to see the steps Make is taking
M = $(shell if [ "$$(tput colors 2> /dev/null || echo 0)" -ge 8 ]; then printf "\033[34;1m▶  $(1)\033[0m"; else printf "▶ $(1)"; fi)

CRD_OPTIONS ?= "crd:generateEmbeddedObjectMeta=true"

CONTROLLER_RUNTIME_URL ?= https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime
REGISTRY ?= gresearch
OPERATOR_IMAGE ?= $(REGISTRY)/controlled-job-operator
TAG := $(shell date +%Y%m%d.%H%M%S)

# Colours for terminal output
RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
NOCOLOR='\033[0m'

# go source files, ignore vendor directory
SRC := $(shell find . -type f -name '*.go' -o -path './hack/*' -not -path "./vendor/*" | xargs grep -lL "^// Code generated .* DO NOT EDIT\.")
# Source files generated by go generate
GENERATED_SRC := $(sort ./api/v1/zz_generated.deepcopy.go $(shell find . -type f -name '*.go' -not -path "./vendor/*" | xargs grep -l "^// Code generated .* DO NOT EDIT\."))

# Tools

# Work out out absolute path
PROJECT_DIR := $(shell dirname $(abspath $(lastword $(MAKEFILE_LIST))))

# Setting SHELL to bash allows bash commands to be executed by recipes.
# This is a requirement for 'setup-envtest.sh' in the test target.
# Options are set to exit when a recipe line exits non-zero or a piped command fails.
SHELL = /usr/bin/env bash -o pipefail
.SHELLFLAGS = -ec
.PHONY: all
all: build

##@ Development

.PHONY: install-tools
install-tools: ; $(info $(call M,$@…))
	go install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.15.0
	go install github.com/matryer/moq@v0.3.4

.PHONY: manifests
manifests: $(SRC) mod install-tools ; $(info $(call M,$@…))
	controller-gen $(CRD_OPTIONS) rbac:roleName=controlledjob-manager-role webhook paths="./..." output:crd:artifacts:config=config/crd/bases

.PHONY: generate
generate: $(SRC) install-tools ; $(info $(call M,$@…))
	controller-gen object:headerFile="hack/boilerplate.go.txt" paths="./..."
	go generate ./...

.PHONY: fmt
fmt: $(SRC) $(GENERATED_SRC) ; $(info $(call M,$@…))
	go fmt ./...

.PHONY: vet
vet: $(SRC) $(GENERATED_SRC) ; $(info $(call M,$@…))
	go vet ./...

.PHONY: go-format
go-format: fmt vet

.PHONY: mod
mod: go.mod ; $(info $(call M,$@…))
	go mod download
	go mod vendor

.PHONY: unit-test
unit-test: $(SRC) mod ; $(info $(call M,$@…))
	go test ./...

ENVTEST_ASSETS_DIR=$(shell pwd)/testbin
TEST_DEPS = mod
.PHONY: test
test: $(TEST_DEPS) $(SRC) ; $(info $(call M,$@…))
	mkdir -p ${ENVTEST_ASSETS_DIR}
	test -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh ${CONTROLLER_RUNTIME_URL}/v0.8.3/hack/setup-envtest.sh
	source ${ENVTEST_ASSETS_DIR}/setup-envtest.sh; fetch_envtest_tools $(ENVTEST_ASSETS_DIR); setup_envtest_env $(ENVTEST_ASSETS_DIR);ENABLE_INTEGRATION_TESTS=true go test -v ./... -coverprofile cover.out

##@ Build
BINARY=bin/manager
BUILD_DEPS = generate fmt vet mod
.PHONY: build
build: $(BUILD_DEPS) $(SRC) ; $(info $(call M,$@…))
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o $(BINARY) main.go

.PHONY: run
run: $(BUILD_DEPS) $(SRC) ; $(info $(call M,$@…))
	go run ./main.go

.PHONY: docker-build
docker-build: test Dockerfile build ; $(info $(call M,$@…)) ## Build docker image with the manager.
	docker build -t $(OPERATOR_IMAGE):$(TAG) .

.PHONY: docker-push
docker-push: docker-build ; $(info $(call M,$@…)) ## Push docker image with the manager.
	docker push $(OPERATOR_IMAGE):$(TAG)

##@ Chart generation

CHART_BASE=deploy/chart

.PHONY: generate-chart
generate-chart: manifests ; $(info $(call M,$@…))
	# start with a blank slate
	rm -rf $(CHART_BASE)/templates/crd
	rm -rf $(CHART_BASE)/templates/rbac
	mkdir -p $(CHART_BASE)/templates/crd
	mkdir -p $(CHART_BASE)/templates/rbac

	# run Kustomize and output to the chart template directory
	kubectl kustomize config/crd -o $(CHART_BASE)/templates/crd
	kubectl kustomize config/rbac -o $(CHART_BASE)/templates/rbac

	# add helm templates to the start and end of each file to allow opt-out
	find $(CHART_BASE)/templates/crd -name "*.yaml" -exec sh -c 'cp $$0 $$0.tmp; echo "{{- if .Values.crd.create -}}" >$$0; cat $$0.tmp >>$$0; echo "{{- end -}}" >>$$0; rm $$0.tmp' {} \;
	find $(CHART_BASE)/templates/rbac -name "*.yaml" -exec sh -c 'cp $$0 $$0.tmp; echo "{{- if .Values.rbac.create -}}" >$$0; cat $$0.tmp >>$$0; echo "{{- end -}}" >>$$0; rm $$0.tmp' {} \;

##@ CLI tool
CLI_BINARY=bin/controlledjobctl

.PHONY: build-cli
build-cli: $(SRC) ; $(info $(call M,$@…))
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o $(CLI_BINARY) cli/main.go